import{_ as h,C as m,c as l,o,ah as d,j as t,a as r,G as a,w as i}from"./chunks/framework.B49HbWsY.js";const w=JSON.parse('{"title":"The AOI Roadmap","description":"","frontmatter":{},"headers":[],"relativePath":"roadmap.md","filePath":"roadmap.md"}'),p={name:"roadmap.md"},u={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.832ex",height:"2.452ex",role:"img",focusable:"false",viewBox:"0 -833.9 2577.6 1083.9","aria-hidden":"true"},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.774ex",height:"2.473ex",role:"img",focusable:"false",viewBox:"0 -843 2994 1093","aria-hidden":"true"};function g(c,e,Q,f,b,y){const s=m("mjx-assistive-mml"),n=m("mjx-container");return o(),l("div",null,[e[17]||(e[17]=d('<h1 id="the-aoi-roadmap" tabindex="-1">The AOI Roadmap <a class="header-anchor" href="#the-aoi-roadmap" aria-label="Permalink to &quot;The AOI Roadmap&quot;">​</a></h1><p>This roadmap is a <strong>recommended learning path</strong> for AOI students who want to gradually build their competitive programming and problem-solving skills.</p><p>⚠️ <strong>Important:</strong></p><ul><li>Focus on <strong>problem-solving skills</strong> more than rushing to advance in the roadmap.</li><li>Make sure your <strong>basics are strong</strong> before moving on.</li><li>You are not obliged to complete the whole roadmap — it is just a <strong>suggestion of what to do next</strong>.</li><li><strong>Practice a lot</strong> — solving problems consistently is the most effective way to improve.</li><li>Learn to <strong>write clean solutions and explain your reasoning</strong> — clarity is as important as correctness.</li><li>Always review your mistakes and <strong>analyze why a solution failed</strong> — this is where the real learning happens.</li></ul><hr><h2 id="phase-1-–-foundations" tabindex="-1">Phase 1 – Foundations <a class="header-anchor" href="#phase-1-–-foundations" aria-label="Permalink to &quot;Phase 1 – Foundations&quot;">​</a></h2><ul><li><a href="./fundamentals/intro-to-c%2B%2B.html">Language basics (C++): I/O, loops, conditionals, functions</a></li><li><a href="./fundamentals/time-complexity.html">Complexity analysis (Big-O, simple cases)</a></li><li>Basic math: <a href="./math/proof-writing.html">logic</a>, <a href="./math/nt-basics.html">gcd, lcm, primes, modular arithmetic</a>, <a href="./math/sequences.html">sequences</a></li><li><a href="./fundamentals/strings-arrays.html">Arrays &amp; strings basics</a></li><li><a href="./fundamentals/problem-solving.html">Problem-solving mindset (reading problems, testing with examples)</a></li><li><a href="./fundamentals/debugging.html">Debugging practices</a></li><li><a href="./math/proof-writing.html">Introduction to proof writing in mathematics</a></li></ul><hr><h2 id="phase-2-–-first-data-structures-problem-solving-tools" tabindex="-1">Phase 2 – First Data Structures &amp; Problem-Solving Tools <a class="header-anchor" href="#phase-2-–-first-data-structures-problem-solving-tools" aria-label="Permalink to &quot;Phase 2 – First Data Structures &amp; Problem-Solving Tools&quot;">​</a></h2><ul><li><a href="./algorithms/prefix-sums.html">Prefix sums, difference arrays</a></li><li><a href="./data-structures/linear-ds.html">Stacks, queues, deques, linked lists</a></li><li><a href="./fundamentals/builtin-sorting.html"><code>std::sort</code>, custom comparators</a></li><li><a href="./algorithms/two-pointers.html">Two pointers</a></li><li>Simple greedy strategies + proof of correctness + Mathematical Induction</li><li>Geometry basics: Dot/Cross Product, Manhattan Distance, Euclidean Distance</li><li>Floating point number representation</li><li>Radix conversion</li><li>Binary search on arrays</li></ul><hr><h2 id="phase-3-–-brute-force-recursion-intro-to-graphs-dp" tabindex="-1">Phase 3 – Brute Force, Recursion &amp; Intro to Graphs/DP <a class="header-anchor" href="#phase-3-–-brute-force-recursion-intro-to-graphs-dp" aria-label="Permalink to &quot;Phase 3 – Brute Force, Recursion &amp; Intro to Graphs/DP&quot;">​</a></h2>',12)),t("ul",null,[e[7]||(e[7]=t("li",null,"Brute force & complexity limits",-1)),t("li",null,[e[2]||(e[2]=r("Sorting techniques: ",-1)),a(n,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:i(()=>[(o(),l("svg",u,[...e[0]||(e[0]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(763,0)"},[t("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"msup",transform:"translate(1152,0)"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(633,363) scale(0.707)"},[t("path",{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",style:{"stroke-width":"3"}})])]),t("g",{"data-mml-node":"mo",transform:"translate(2188.6,0)"},[t("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})])])],-1)])])),a(s,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:i(()=>[...e[1]||(e[1]=[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"O"),t("mo",{stretchy:"false"},"("),t("msup",null,[t("mi",null,"n"),t("mn",null,"2")]),t("mo",{stretchy:"false"},")")],-1)])]),_:1})]),_:1}),e[3]||(e[3]=r(" sorts, Radix sort, Bucket sort",-1))]),e[8]||(e[8]=t("li",null,"Recursion",-1)),e[9]||(e[9]=t("li",null,"Backtracking (N-queens, permutations)",-1)),e[10]||(e[10]=t("li",null,"Bitmasks for subsets",-1)),t("li",null,[e[6]||(e[6]=r("Divisibility, Sieve of Eratosthenes, factorization in ",-1)),a(n,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:i(()=>[(o(),l("svg",T,[...e[4]||(e[4]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(763,0)"},[t("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"msqrt",transform:"translate(1152,0)"},[t("g",{transform:"translate(853,0)"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])]),t("g",{"data-mml-node":"mo",transform:"translate(0,-17)"},[t("path",{"data-c":"221A",d:"M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z",style:{"stroke-width":"3"}})]),t("rect",{width:"600",height:"60",x:"853",y:"723"})]),t("g",{"data-mml-node":"mo",transform:"translate(2605,0)"},[t("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})])])],-1)])])),a(s,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:i(()=>[...e[5]||(e[5]=[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"O"),t("mo",{stretchy:"false"},"("),t("msqrt",null,[t("mi",null,"n")]),t("mo",{stretchy:"false"},")")],-1)])]),_:1})]),_:1})]),e[11]||(e[11]=t("li",null,"Binary search on answer",-1)),e[12]||(e[12]=t("li",null,"Binary exponentiation",-1)),e[13]||(e[13]=t("li",null,"Interactive problems",-1)),e[14]||(e[14]=t("li",null,[t("a",{href:"./algorithms/dp.html"},"Intro to DP: Fibonacci, Coin Change")],-1)),e[15]||(e[15]=t("li",null,"Graph representation: adjacency list vs. matrix",-1)),e[16]||(e[16]=t("li",null,"Connected components",-1))]),e[18]||(e[18]=d('<hr><h2 id="phase-4-–-intermediate-ds-dp" tabindex="-1">Phase 4 – Intermediate DS &amp; DP <a class="header-anchor" href="#phase-4-–-intermediate-ds-dp" aria-label="Permalink to &quot;Phase 4 – Intermediate DS &amp; DP&quot;">​</a></h2><ul><li>Sets, multisets, hashmaps, policy-based DS</li><li>Coordinate compression</li><li>Pointers &amp; Iterators</li><li>Trees (DFS, BFS, properties, DP)</li><li>Tries</li><li><a href="./algorithms/dp.html">Intermediate DP:</a><ul><li>Grid paths</li><li>Prefix DP</li><li>0/1 Knapsack</li><li>Interval DP (matrix chain, merging stones)</li><li>LIS (Longest Increasing Subsequence)</li></ul></li><li>Counting &amp; combinatorics basics (nCr, Pascal’s triangle, factorials mod, Binomial Theorem)</li><li>Modular Inverses &amp; Fermat’s Little Theorem</li><li>Game Theory Basics &amp; Minimax</li><li>Line sweeping</li></ul><hr><h2 id="phase-5-–-graph-algorithms-part-i" tabindex="-1">Phase 5 – Graph Algorithms (Part I) <a class="header-anchor" href="#phase-5-–-graph-algorithms-part-i" aria-label="Permalink to &quot;Phase 5 – Graph Algorithms (Part I)&quot;">​</a></h2><ul><li>BFS, DFS in depth</li><li>Planar Graphs, Eulerian Graphs, Hamiltonian Graphs</li><li>Topological Sort &amp; Euler Tour</li><li>Shortest paths: <ul><li>Dijkstra</li><li>Bellman–Ford</li><li>Floyd–Warshall</li></ul></li></ul><hr><h2 id="phase-6-–-divide-conquer-trees-ds" tabindex="-1">Phase 6 – Divide &amp; Conquer, Trees &amp; DS <a class="header-anchor" href="#phase-6-–-divide-conquer-trees-ds" aria-label="Permalink to &quot;Phase 6 – Divide &amp; Conquer, Trees &amp; DS&quot;">​</a></h2><ul><li>Fast sorting (merge sort, quick sort)</li><li>Divide &amp; conquer on problems (inversion count, Karatsuba multiplication)</li><li>Sparse tables, Segment Trees, Fenwick Tree, Merge Sort Tree</li><li>Binary heaps</li><li>Union-Find (DSU)</li></ul><hr><h2 id="phase-7-–-advanced-graph-algorithms" tabindex="-1">Phase 7 – Advanced Graph Algorithms <a class="header-anchor" href="#phase-7-–-advanced-graph-algorithms" aria-label="Permalink to &quot;Phase 7 – Advanced Graph Algorithms&quot;">​</a></h2><ul><li>Minimum Spanning Tree (Kruskal, Prim)</li><li>Binary Lifting (LCA)</li><li>Strongly Connected Components &amp; Condensation graph</li><li>Flows (Ford–Fulkerson)</li><li>Bipartite Matching, Hungarian Algorithm</li><li>More interactive problems</li><li>Bridges &amp; Articulation Points</li></ul><hr><h2 id="phase-8-–-advanced-topics" tabindex="-1">Phase 8 – Advanced Topics <a class="header-anchor" href="#phase-8-–-advanced-topics" aria-label="Permalink to &quot;Phase 8 – Advanced Topics&quot;">​</a></h2><ul><li>Persistent Data Structures</li><li>Advanced Number Theory <ul><li>Euler’s Totient Function</li><li>Bézout’s Identity</li></ul></li><li>Ternary search (unimodal functions)</li><li>Sqrt decomposition &amp; Mo’s algorithm</li><li>Heavy-light decomposition</li><li>Centroid decomposition</li><li>Knuth–Yao optimization</li><li>Randomized Algorithms</li><li>Lazy propagation</li><li>Geometry: <ul><li>Convex hull</li><li>Rotations &amp; angle problems</li><li>Polygon area</li></ul></li></ul><hr><h2 id="final-tips" tabindex="-1">Final Tips <a class="header-anchor" href="#final-tips" aria-label="Permalink to &quot;Final Tips&quot;">​</a></h2><ul><li><strong>Consistency beats intensity</strong>: Solve a few problems every day rather than cramming.</li><li><strong>Mix topics</strong>: Don’t stay stuck on only one topic for months; revisit earlier phases to reinforce them.</li><li><strong>Balance theory and practice</strong>: Understanding algorithms is important, but solving problems under time pressure matters more.</li><li><strong>Compete often</strong>: Join Codeforces, AtCoder, and AOI contests regularly to measure your progress.</li><li><strong>Discuss with peers</strong>: Teaching or explaining a solution to a friend helps you deeply understand it.</li><li><strong>Don’t fear hard problems</strong>: Even if you can’t solve them, trying will push your thinking forward.</li></ul><blockquote><p>🚀 Remember: becoming strong at problem-solving is not about how <strong>fast</strong> you progress through the roadmap, but how <strong>deeply</strong> you understand and apply each step.</p></blockquote>',19))])}const v=h(p,[["render",g]]);export{w as __pageData,v as default};
